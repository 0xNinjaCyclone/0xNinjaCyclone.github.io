<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Buffer-Overflow on 0xNinjaCyclone Blog</title>
    <link>https://0xninjacyclone.github.io/tags/buffer-overflow/</link>
    <description>Recent content in Buffer-Overflow on 0xNinjaCyclone Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <managingEditor>elsharifabdallah53@gmail.com (Abdallah Mohamed)</managingEditor>
    <webMaster>elsharifabdallah53@gmail.com (Abdallah Mohamed)</webMaster>
    <lastBuildDate>Wed, 19 Feb 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://0xninjacyclone.github.io/tags/buffer-overflow/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Exploit development] 09- Crashing the Stack: A Real-World Guide to Buffer Overflow Exploits</title>
      <link>https://0xninjacyclone.github.io/posts/exploitdev_9_bof/</link>
      <pubDate>Wed, 19 Feb 2025 00:00:00 +0000</pubDate><author>elsharifabdallah53@gmail.com (Abdallah Mohamed)</author>
      <guid>https://0xninjacyclone.github.io/posts/exploitdev_9_bof/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;&#xA;&lt;p&gt;Hi folks, here we are again after a hiatus of months or nearly a year. I hope you are all well. This is the most interesting part of the exploitation series, where we will discuss the most famous type of memory corruption bugs: Stack-based buffer overflow. With an explanation of various examples of the vulnerability, why it occurs in the first place, and how it can be exploited in different scenarios depending on the nature of the target, and also addressing more advanced topics such as whether high-level languages ​​that have an automatic memory management system are completely safe against this type of vulnerabilities or not.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
